EXP_TERM' EXPRESSION' SIMPLE_STATEMENT RELATION FALSE FORSTMT TERM_LIST OPERATION ARRAY_TYPE IOS_STATEMENT DECLARATION_LIST ASSIGNMENT IFSTMT TYPE CONDITION PROGRAM COMPSTMT EXPRESSION OUTPUTSTMT STRUCT_STATEMENT TERM WHILESTMT  STATEMENT INPUTSTMT STATEMENT STATEMENT_LIST TERM_LIST STATEMENT_LIST PRIMARY_TYPE DECLARATION EXP_TERM FACTOR
EPSILON ID CONSTANT + - * / = == != ! > < >= <= % ++ -- ^ ( ) [ ] { } ; : if else while number string let const read print for && || @
PROGRAM

RELATION -> < | <= | == | != | >= | > | && | ||
OPERATION -> + | - | * | / | % | ^
PRIMARY_TYPE -> number | string | bool
ARRAY_TYPE -> PRIMARY_TYPE [ ]
TYPE -> PRIMARY_TYPE | ARRAY_TYPE
DECLARATION -> let ID : TYPE ;
DECLARATION_LIST -> DECLARATION | DECLARATION DECLARATION_LIST

TERM -> ID | CONSTANT
TERM_LIST -> TERM ; | TERM TERM_LIST ;
EXPRESSION -> EXP_TERM EXPRESSION'
EXPRESSION' -> + EXP_TERM EXPRESSION' | - EXP_TERM EXPRESSION' | EPSILON
EXP_TERM -> FACTOR EXP_TERM'
EXP_TERM' -> * FACTOR EXP_TERM' | / FACTOR EXP_TERM' | EPSILON
FACTOR -> ( EXPRESSION ) | ID | CONSTANT

INPUTSTMT -> read ( ID ) ;
OUTPUTSTMT -> printf ( TERM_LIST ) ;
IOS_STATEMENT -> INPUTSTMT | OUTPUTSTMT
ASSIGNMENT -> ID = EXPRESSION ; | ID ++ ; | ID -- ;
SIMPLE_STATEMENT -> ASSIGNMENT | IOS_STATEMENT

STATEMENT -> DECLARATION | SIMPLE_STATEMENT | STRUCT_STATEMENT
STATEMENT_LIST -> STATEMENT | STATEMENT STATEMENT_LIST
COMPSTMT -> { STATEMENT_LIST }

WHILESTMT -> while ( CONDITION ) COMPSTMT
FORSTMT -> for ( ASSIGNMENT ; CONDITION ; ASSIGNMENT ) COMPSTMT
IFSTMT -> if ( CONDITION ) COMPSTMT | if ( CONDITION ) COMPSTMT else COMPSTMT | if ( CONDITION ) COMPSTMT else IFSTMT

STRUCT_STATEMENT -> WHILESTMT | FORSTMT | IFSTMT | COMPSTMT

CONDITION -> EXPRESSION RELATION EXPRESSION |  ! ( EXPRESSION RELATION EXPRESSION )

PROGRAM -> @ DECLARATION_LIST STATEMENT_LIST @
