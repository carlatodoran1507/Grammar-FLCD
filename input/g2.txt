SIMPLE_STATEMENT RELATION FALSE FORSTMT TERM_LIST OPERATION ARRAY_TYPE IOS_STATEMENT DECLARATION_LIST DIGIT ASSIGNMENT IFSTMT ALL_DIGITS TRUE TYPE STRING CONDITION PROGRAM COMPSTMT EXPRESSION OUTPUTSTMT STRUCT_STATEMENT TERM WHILESTMT BOOL NUMBER LETTER STATEMENT INPUTSTMT STATEMENT STATEMENT_LIST TERM_LIST POZ_NUMBER STATEMENT_LIST NOZERO_DIGIT SEQ_LET_DIGIT PRIMARY_TYPE DECLARATION CONSTANT_STRING EXP_TERM FACTOR
ID CONSTANT + - * / = == != ! > < >= <= % ++ -- ^ ( ) [ ] { } ; : if else while number string let const read print true false for && || @ a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 true false
PROGRAM

NUMBER -> 0 | - POZ_NUMBER | + POZ_NUMBER
ALL_DIGITS -> DIGIT | DIGIT ALL_DIGITS
POZ_NUMBER -> NOZERO_DIGIT | NOZERO_DIGIT ALL_DIGITS
CONSTANT_STRING -> LETTER | DIGIT | LETTER STRING | DIGIT STRING
STRING -> ' CONSTANT_STRING '
BOOL -> true | false
SEQ_LET_DIGIT -> LETTER SEQ_LET_DIGIT | DIGIT SEQ_LET_DIGIT

LETTER -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
DIGIT -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
NOZERO_DIGIT -> 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

RELATION -> < | <= | == | != | >= | > | && |  ||
OPERATION -> + | - | * | / | % | ^
PRIMARY_TYPE -> number | string | bool
ARRAY_TYPE -> PRIMARY_TYPE [ ]
TYPE -> PRIMARY_TYPE | ARRAY_TYPE
DECLARATION -> let ID : TYPE ;
DECLARATION_LIST -> DECLARATION | DECLARATION DECLARATION_LIST

TERM -> ID | CONSTANT
TERM_LIST -> TERM ; | TERM TERM_LIST ;
EXPRESSION -> ( EXPRESSION + EXP_TERM ) | ( EXPRESSION - EXP_TERM ) | EXP_TERM
EXP_TERM -> ( EXP_TERM * FACTOR ) | ( EXP_TERM / FACTOR ) | FACTOR
FACTOR -> ( EXPRESSION ) | ID | CONSTANT

INPUTSTMT -> read ( ID ) ;
OUTPUTSTMT -> printf ( TERM_LIST ) ;
IOS_STATEMENT -> INPUTSTMT | OUTPUTSTMT
ASSIGNMENT -> ID -- ; | ID = EXPRESSION ; | ID ++ ;
SIMPLE_STATEMENT -> ASSIGNMENT | IOS_STATEMENT

STATEMENT -> DECLARATION | SIMPLE_STATEMENT | STRUCT_STATEMENT
STATEMENT_LIST -> STATEMENT | STATEMENT STATEMENT_LIST
COMPSTMT -> { STATEMENT_LIST }

WHILESTMT -> while ( CONDITION ) COMPSTMT
FORSTMT -> for ( ASSIGNMENT ; CONDITION ; ASSIGNMENT ) COMPSTMT
IFSTMT -> if ( CONDITION ) COMPSTMT | if ( CONDITION ) COMPSTMT else COMPSTMT | if ( CONDITION ) COMPSTMT else IFSTMT

STRUCT_STATEMENT -> WHILESTMT | FORSTMT | IFSTMT | COMPSTMT

CONDITION -> EXPRESSION RELATION EXPRESSION |  ! ( EXPRESSION RELATION EXPRESSION )

PROGRAM -> @ DECLARATION_LIST STATEMENT_LIST @


